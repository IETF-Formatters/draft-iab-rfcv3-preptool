---
title: RFC v3 Prep Tool Description
cat: info
docname: draft-hoffman-rfcv3-preptool

stand_alone: true

ipr: trust200902
area: Internet
kw: Internet-Draft

pi:
  toc: yes
  tocdepth: 4
  sortrefs: yes
  symrefs: yes

author:
  -
    ins: P. Hoffman
    name: Paul Hoffman
    org: VPN Consortium
    email: paul.hoffman@vpnc.org
  -
    ins: J. Hildebrand
    name: Joe Hildebrand
    org: Cisco
    email: jhildebr@cisco.com

normative:

informative:
  RFC5741:
  RFC6949:
  I-D.hoffman-xml2rfc:
  I-D.brownlee-svg-rfc:

--- abstract

This document describes some aspects of the "prep tool" that is expected
to be created when the new RFC v3 specification is deployed.
This draft is just a way to keep track of the ideas; it is not (currently)
expected to be published as an RFC.

--- middle


Introduction
=====

For the future of the RFC format, the RFC Editor 
has decided that XML (using the XML2RFCv3 vocabulary {{I-D.hoffman-xml2rfc}}) is the canonical format,
in the sense
that it is the data that is blessed by the process as the actual RFC. See
{{RFC6949}} for more detail on this.

Most people will read other formats, such as HTML, PDF, ASCII text, or other
formats of the future, however.  In order to ensure each of these format is as
similar as possible to one another as well as the canonical XML, there is a
desire for the translation from XML into the other formats will be
straightforward syntactic translation. To make that happen, a good amount of
data will need to be in the XML format that is not there today. That data will
be added by a program called the "prep tool", which will often run as a part of
the xml2rfc process.

This draft specifies the steps that the prep tool will have to take.
As changes to {{I-D.hoffman-xml2rfc}} are made, this document will be updated.


v3 Prep Tool Usage Scenarios
=====

The prep tool will have several settings:

* Internet-Draft preparation

* Canonical RFC preparation

There are only a few difference between the two settings. For example, the
boilerplate output will be different, as will the date output on the front page.

Note that this only describes what the IETF-sponsored prep tool does. Others
might create their own work-alike prep tools for their own formatting needs.
However, an output format developer does not not need to change the prep tool in
order to create their own formatter: they only need to be able to consume
prepared text.

This tool is described as if it is a separate tool so that we can reason about
its architectural properties. In actual implementation, it might be a part of a
larger suite of functionality.


Internet-Draft Submission
=====

When the IETF draft submission tool accepts v3 XML as an input format, the
submission tool runs the submitted file through the prep tool. If the tool finds
no errors, it keeps two XML files: the submitted file and the prepped file.

The prepped file provides a record of what a submitter was attesting to at the
time of submission. It represents a self-contained record of what any external
references resolved to at the time of submission.

The prepped file is used by the IETF
formatters to create outputs such as HTML, PDF, and text (or the tools act in a
way indistinguishable from this). The message sent out by the draft submission
tool includes a link to the original XML as well as the other outputs, including
the prepped XML.

The prepped XML can be used by tools not yet developed to output new formats
that have as similar output as possible to the current IETF formatters. For
example, if the IETF creates a .mobi output renderer later, it can run that
renderer on all of the prepped XML that has been saved, ensuring that the
content of included external references and all of the part numbers and
boilerplate will be the same as what was produced by the previous IETF
formatters at the time the document was first uploaded.


Canonical RFC Preparation
=====

During AUTH48, the RPC will run the prep tool in canonical RFC preparation mode
and make the results available to the authors so they can see what the final
output might look like. When the document is done with AUTH48 review, the RPC
runs the prep tool in canonical RFC preparation mode one last time, locks down
the canonicalized XML, runs the formatters for the publication
formats, and publishes all of those. It is probably a good idea for the RPC to
keep a copy of the input XML file from the various steps of the RFC production
process.

This document assumes that the prep tool will be used in the following manner by the RFC Production Center;
they may use something different, or with different configuration.

Similarly to I-D's, the prepped XML can be used later to re-render the output
formats, or to generate new formats.


What the v3 Prep Tool Does {#steps}
=====

The steps listed here are in order of processing. In all cases where the prep
tool would "add" an attribute or element, if that attribute or element already
exists, the prep tool will check that the attribute or element is correct. If
the value is incorrect, the prep tool will warn with the old and new values,
then replace the incorrect value with the new value.

1. Fully process any DTDs in the input document, then remove the DTD.
At a minimum, this entails processing the entityrefs and includes for external
files.

1. Process all &lt;x:include&gt; elements. Note: &lt;x:include&gt;d XML may
include more &lt;x:include&gt;s (with relative URLs rooted at the xml:base). The
tool may be configurable with a limit on the depth of recursion.

1. Remove processing instructions.

1. If in RFC production mode, remove comments.

1. Add the {{RFC5741}} boilerplate text with current values. However, if
different boilerplate text already exists in the input, produce a warning that
says that other tools, specifically the draft submission tool, will treat that
condition as an error. The application will use the "ipr", "category",
"submission", and "consensus" attributes of the &lt;rfc&gt; element to determine
which {{RFC5741}} boilerplate to include, as described in Appendix A of
{{I-D.hoffman-xml2rfc}}.

1. Fill in the "prepTime" attribute of &lt;rfc&gt; with the current datetime.

1. If in I-D mode, if there is a &lt;note&gt; element with a "removeInRFC"
attribute that has the value "true", add a paragraph to the top of the &lt;note&gt; element that says
"This note is to be removed before publishing as an RFC.", if such a
paragraph does not yet exist.  If in RFC mode, removeInRFC="true" is an error.

1. If in I-D mode, if there is a &lt;date&gt; element in the document's
&lt;front&gt; element, and that date is earlier than today, it is an error.

1. If in I-D mode, fill in "expiresDate" attribute of &lt;rfc&gt; based on the
the &lt;date&gt; element of the document's &lt;front&gt; element, if there is one.  Use the same expiry date (if needed) in the boilerplate.

1. Fill in any default values for attributes on elements, except "keepWithNext"
and "keepWithPrevious" of &lt;t&gt;, and "toc" of &lt;section&gt;.

1. For any &lt;reference&gt; element that does not already have a "target" attribute, fill that
attribute in if the element has a &lt;seriesinfo&gt; child element. The particular URLs
for RFCs and Internet-Drafts for this step will be specified later by the RFC Editor and
the IESG. These URLs might also be different from before and after the v3 format is adopted.

1. Sanity-check the value of the "obsoletes" and "updates" attributes in the
&lt;rfc&gt; element and give a warning if the sanity check fails.  Ensure that each list is sorted numerically, ignoring leading zeros.
Sanity checks include:
  * ensure that the list is separated by a comma and a space
  * ensure each element of the list consists solely of a string of digits
  * ensure that each obsoleted or updated RFC appears in the references

1. For each &lt;section&gt; element that has a "numbered" attribute set to "false",
verify that this &lt;section&gt; element is a child of &lt;boilerplate&gt;, &lt;middle&gt;, or &lt;back&gt; element,
and verify that this &lt;section&gt; element is followed only by zero or more &lt;section&gt; elements with numbered="false";
if either test fails, it is an error.

1. Add a "slugifiedName" attribute to each &lt;name&gt; element that does not
contain one; replace the attribute if it contains a value that begins with "n-".

1. Add "pn" attributes for all parts.  Parts are:
  * &lt;section&gt;: pn='s-1.4.2'
  * &lt;abstract&gt;: pn='s-abstract'
  * &lt;note&gt;: pn='s-note-2'
  * &lt;boilerplate&gt;: pn='s-boilerplate'
  * &lt;table&gt;: pn='t-3'
  * &lt;figure&gt;: pn='f-4'
  * &lt;artwork&gt;, &lt;aside&gt;, &lt;blockquote&gt;, &lt;dl&gt;, &lt;dt&gt;,
    &lt;li&gt;, &lt;ol&gt;, &lt;references&gt;, &lt;sourcecode&gt;, &lt;t&gt;,
    &lt;ul&gt;: pn='p-\[section\]-\[counter\]'

1. Add a "start" attribute to every &lt;ol&gt; element containing a group that
doesn't already have a start.

1. If the "sortRefs" attribute of the &lt;rfc&gt; element is true,
sort the &lt;reference&gt;s and &lt;referencegroup&gt;s lexically by the value of the "anchor" attribute,
as modified by the "to" attribute of any &lt;displayreference&gt; element.

1. For each &lt;xref&gt; element, give an error if there is no "target" attribute, or if that attribute is not
an anchor in another element.

1. For each &lt;xref&gt; element that has content, fill the "derivedContent" with the element
content, having first trimmed the whitespace from ends of content text.
Issue a warning if the "derivedContent" attribute already exists and has a different value than what
was being filled in.

1. For each &lt;xref&gt; element that does not have content, fill the "derivedContent" based on the
"format" attribute.
  * For format='counter', if the anchor is not a section, figure, table, or ordered list number, give an error.
  * For format='counter', the "derivedContent" is the section, figure, table, or ordered list number
    of the element with anchor equal to the xref target.
  * For format='default' and the "target" attribute points to a &lt;reference&gt; or
    &lt;referencegroup&gt; element, the "derivedContent" is the value of the "target" attribute
    (or the "to" attribute of a &lt;displayreference&gt; element for the targeted &lt;reference&gt;).
  * For format='default' and the "target" attribute points something else, the "derivedContent" is the
    title of the thing pointed to, such as "Section 2.3" or "Table 4".
  * For format='title', if the target is a &lt;reference&gt; element, the "derivedContent" attribute is
    the name of the reference, extracted from the &lt;title&gt; child of the &lt;front&gt; child of the
    reference.
  * For format='title', if the target element has a &lt;name&gt; child element, the "derivedContent"
    attribute is the text content of that &lt;name&gt; element concatenated with the text content of
    each descendant node of &lt;name&gt; (that is, stripping out all of the XML markup, leaving only the
    text).  
  * For format='title', if the target element does not contain a &lt;name&gt; child element, the
    "derivedContent" attribute is value of the "target" attribute with no other adornment.
    Issue a warning if the "derivedContent" attribute already exists and has a different value than what
    was being filled in.

1. For each &lt;relref&gt; element, give an error if there is no "target" attribute, or if that attribute is
not an anchor in a &lt;reference&gt; element,
or if the target reference of the &lt;relref&gt; element does not have a "target" attribute.

1. For each &lt;relref&gt; element, if the element has neither a "relative" nor a "section" attribute, give an error.

1. For each &lt;relref&gt; element, if the element has both a "relative" nor a "section" attribute, give an error.

1. For each &lt;relref&gt; element, fill in the "derivedLink" attribute.

1. For each &lt;relref&gt; element that does not have content, fill the"derivedRemoteContent"
based on the content of the target reference.
  * If the target reference is a RFC or Internet-Draft in the v3 format, and the anchor given in the
    "relative" attribute or derived from the "section" attribute is not in the target reference, give
    an error.
  * If the target reference is a RFC or Internet-Draft in the v3 format, find the anchor given in the
    "relative" attribute or derived from the "section" attribute, and use the identifier of that element
    (such as "Section 2.3" or "Table 4") for the "derivedRemoteContent".
  * If the target reference is not a RFC or Internet-Draft in the v3 format, use the value of the
    "relative" or "section" attribute for the "derivedRemoteContent".
  * Issue a warning if the "derivedRemoteContent" attribute already exists and has a different value
    than what was being filled in.

1. For each &lt;relref&gt; element that has content, fill the "derivedRemoteContent" with the
element content, having first trimmed the whitespace from ends of content text.
Issue a warning if the "derivedRemoteContent" attribute already exists and has a different value
than what was being filled in.

1. If an &lt;artwork&gt; element has both a "src" attribute and there is any
existing content, give an error.

1. If an &lt;artwork&gt; element has a "src" attribute with no scheme is
specified, treat the scheme as "file:" in a path relative to the file being
processed.  This will likely be one of the most common authoring approaches.

1. If an &lt;artwork&gt; element has a "src" attribute with a "file:" scheme,
and if processing the URL would cause the processor to retrieve a file that is
not in the same directory, or a subdirectory, as the file being processed, give
an error.  This rule attempts to prevent &lt;artwork
src='file:///etc/passwd'&gt; and similar security issues.

1. If an &lt;artwork&gt; element has a "src" attribute URI scheme that is not
"data:", "file:", "http:", or "https:", give an error.

1. If an &lt;artwork&gt; element has type='svg' and there is a "src" attribute,
the data needs to be moved into the content of the &lt;artwork&gt; element.
  * If the "src" URI scheme is "data:", fill the content of the &lt;artwork&gt;
    element with that data and remove the "src" attribute.  If the mediatype
    of the data: URI is not "image/svg+xml", error.
  * If the "src" URI scheme is "file:", "http:", or "https:", fill the content
    of the &lt;artwork&gt; element with the resolved XML from the URI in the
    "src" attribute. Add an "originalSrc" attribute with the value of the URI and
    remove the "src" attribute.

1. If an &lt;artwork&gt; element has type='svg', check the SVG schema of the
resulting content against the profile in {{I-D.brownlee-svg-rfc}}.
If it does not pass the check, give an error (?) or strip the offending content (?).

1. If an &lt;artwork&gt; element has type='binary-art', the data needs to be in
a "src" attribute with a URI scheme of "data:".
  * If the element has content, give an error.
  * If in RFC production mode, give an error.
  * If the "src" URI scheme is "file:", "http:", or "https:", resolve the URL.
    Replace the "src" attribute with a "data:" URI,
    add an "originalSrc" attribute with the value of the URI, and remove the "src"
    attribute.  For the "http:" and "https:" URI schemes,
    the mediatype of the "data:" URI will be the Content-Type of the HTTP response.
    For the "file:" URI scheme,
    the mediatype of the "data:" URI needs to be guessed with heuristics
    (this is possibly a bad idea).
    Note: since this feature can't be used for RFCs at the moment, this entire
    feature might be de-prioritized.

1. If an &lt;artwork&gt; element does not have type='svg' or type='binary-art'
and there is a "src" attribute, the data needs to be moved into the content of
the &lt;artwork&gt; element. Note that this step assumes that all of the
preferred types other than "binary-art" are text.
  * If the "src" URI scheme is "data:", fill the content of the &lt;artwork&gt;
    element with the correctly-escaped form of that data and remove the "src"
    attribute.
  * If the "src" URI scheme is "file:", "http:", or "https:", fill the content
    of the &lt;artwork&gt; element with the correctly-escaped form of the
    resolved text from the URI in the "src" attribute. Add an "originalSrc"
    attribute with the value of the URI and remove the "src" attribute.

1. If a &lt;sourcecode&gt; element has both a "src" attribute and there is any
existing content, give an error.

1. If a &lt;sourcecode&gt; element has a "src" attribute with no scheme is
specified, treat the scheme as "file:" in a path relative to the file being
processed.

1. If a &lt;sourcecode&gt; element has a "src" attribute with a "file:" scheme,
and if processing the URL would cause the processor to retrieve a file that is
not in the same directory, or a subdirectory, as the file being processed, give
an error.  This rule attempts to prevent &lt;artwork
src='file:///etc/passwd'&gt; and similar security issues.

1. If a &lt;sourcecode&gt; element has a "src" attribute URI scheme that is not
"data:", "file:", "http:", or "https:", give an error.

1. If a &lt;sourcecode&gt; element has a "src" attribute,
the data needs to be moved into the content of the &lt;sourcecode&gt; element.
  * If the "src" URI scheme is "data:", fill the content of the
    &lt;sourcecode&gt; element with the appropriately-escaped data and remove
    the "src" attribute.
  * If the "src" URI scheme is "file:", "http:", or "https:", fill the content
    of the &lt;sourcecode&gt; element with the appropriately-escaped resolved
    text from the URI in the "src" attribute. Add an "originalSrc" attribute with
    the value of the URI and remove the "src" attribute.

1. If an &lt;sourcecode&gt; element has a "type" attribute that matches one of
the known types, and that type has code that can validate the code, do the
validation (noting that elements that have the same "name" attribute should be
collected) and give a warning if the validation fails.

1. Determine all the characters used in the document, and fill in "scripts"
attribute for &lt;rfc&gt;.

1. Ensure that the output has the "version" attribute of &lt;rfc&gt;, and that
it is set to "3".

1. Prepare the index, if one is called for in the document. The steps for doing
that is out of scope for this document.

1. If in I-D mode, check if there is a &lt;link&gt; element with
an ISSN for the RFC series; if so, delete it.

1. If in I-D mode, check if there is a &lt;link&gt; element with
a DOI for this draft; if so, delete it.

1. If in RFC production mode, remove all &lt;link&gt; elements whose "rel" attribute
has the value "alternate".

1. If in RFC production mode, check if there is a &lt;link&gt; element with
an ISSN for the RFC series; if not, add one.

1. If in RFC production mode, check if there is a &lt;link&gt; element with
a DOI for this RFC; if not, add one.

1. If in RFC production mode, check if there is a &lt;link&gt; element with
the file name of the Internet-Draft that became this RFC; if not, add one.

1. If in RFC production mode, remove all "xml:base" or "originalSrc" attributes from
all elements.

1. Pretty-format the XML output.  (Note: tools like <https://github.com/hildjj/dentin> do an adequate job.)

1. If in RFC production mode, ensure that the result is in full compliance to v3
schema, without any deprecated elements or attributes, and give an error if any
issues are found.


Additional Uses for the Prep Tool
=====

There will be a need for Internet-Draft authors who include files from their
local disk (such as for &lt;artwork src="mydrawing.svg"/&gt;) to have the
contents of those files inlined to their drafts before submitting them to the
Internet-Draft processor. (There is a possibility that the Internet-Draft
processor will allow XML files and accompanying files to be submitted at the
same time, but this seems troublesome from a security, portability, and
complexity standpoint.) For these users, having a local copy of the prep tool
that has an option to just inline all local files would be terribly useful. That
option would be a proper subset of the steps given in {{steps}}.

A feature that might be useful in a local prep tool would be the inverse of the
"just inline" option would be "extract all". This would allow a user who has a
v3 RFC or Internet-Draft to dump all of the &lt;artwork&gt; and
&lt;sourcecode&gt; elements into local files instead of having to find each one
in the XML. This option might even do as much validation as possible on the
extracted &lt;sourcecode&gt; elements.  This feature might also remove some of
the features added by the prep tool (such as part numbers and slugifiedName's
starting with "n-") in order to make the resulting file easier to edit.


IANA Considerations {#ianacons}
=====

None.


Security Considerations {#securitycons}
=====

None.


Acknowledgements
=====

Many people contributed valuable ideas to this document. Special thanks go to
Robert Sparks for his in-depth review and contributions early in the
development of this document.

--- back
