<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.28 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-hoffman-rfcv3-preptool" category="info">

  <front>
    <title>RFC v3 Prep Tool Description</title>

    <author initials="P." surname="Hoffman" fullname="Paul Hoffman">
      <organization>ICANN</organization>
      <address>
        <email>paul.hoffman@icann.org</email>
      </address>
    </author>
    <author initials="J." surname="Hildebrand" fullname="Joe Hildebrand">
      <organization>Cisco</organization>
      <address>
        <email>jhildebr@cisco.com</email>
      </address>
    </author>

    <date year="2016" month="January" day="07"/>

    <area>Internet</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes some aspects of the “prep tool” that is expected
to be created when the new RFC v3 specification is deployed.
This draft is just a way to keep track of the ideas; it is not (currently)
expected to be published as an RFC.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>For the future of the RFC format, the RFC Editor 
has decided that XML (using the XML2RFCv3 vocabulary <xref target="I-D.hoffman-xml2rfc"/>) is the canonical format,
in the sense
that it is the data that is blessed by the process as the actual RFC. See
<xref target="RFC6949"/> for more detail on this.</t>

<t>Most people will read other formats, such as HTML, PDF, ASCII text, or other
formats of the future, however.  In order to ensure each of these format is as
similar as possible to one another as well as the canonical XML, there is a
desire for the translation from XML into the other formats will be
straightforward syntactic translation. To make that happen, a good amount of
data will need to be in the XML format that is not there today. That data will
be added by a program called the “prep tool”, which will often run as a part of
the xml2rfc process.</t>

<t>This draft specifies the steps that the prep tool will have to take.
As changes to <xref target="I-D.hoffman-xml2rfc"/> are made, this document will be updated.</t>

<t>The details (particularly any vocabularies) described in this document are expected to change based
on experience gained in implementing the RFC production center’s toolset. Revised documents will be
published capturing those changes as the toolset is completed. Other implementers must not expect
those changes to remain backwards-compatible with the details described in this document.</t>

</section>
<section anchor="v3-prep-tool-usage-scenarios" title="v3 Prep Tool Usage Scenarios">

<t>The prep tool will have several settings:</t>

<t><list style="symbols">
  <t>Internet-Draft preparation</t>
  <t>Canonical RFC preparation</t>
</list></t>

<t>There are only a few difference between the two settings. For example, the
boilerplate output will be different, as will the date output on the front page.</t>

<t>Note that this only describes what the IETF-sponsored prep tool does. Others
might create their own work-alike prep tools for their own formatting needs.
However, an output format developer does not not need to change the prep tool in
order to create their own formatter: they only need to be able to consume
prepared text.</t>

<t>This tool is described as if it is a separate tool so that we can reason about
its architectural properties. In actual implementation, it might be a part of a
larger suite of functionality.</t>

</section>
<section anchor="internet-draft-submission" title="Internet-Draft Submission">

<t>When the IETF draft submission tool accepts v3 XML as an input format, the
submission tool runs the submitted file through the prep tool. If the tool finds
no errors, it keeps two XML files: the submitted file and the prepped file.</t>

<t>The prepped file provides a record of what a submitter was attesting to at the
time of submission. It represents a self-contained record of what any external
references resolved to at the time of submission.</t>

<t>The prepped file is used by the IETF
formatters to create outputs such as HTML, PDF, and text (or the tools act in a
way indistinguishable from this). The message sent out by the draft submission
tool includes a link to the original XML as well as the other outputs, including
the prepped XML.</t>

<t>The prepped XML can be used by tools not yet developed to output new formats
that have as similar output as possible to the current IETF formatters. For
example, if the IETF creates a .mobi output renderer later, it can run that
renderer on all of the prepped XML that has been saved, ensuring that the
content of included external references and all of the part numbers and
boilerplate will be the same as what was produced by the previous IETF
formatters at the time the document was first uploaded.</t>

</section>
<section anchor="canonical-rfc-preparation" title="Canonical RFC Preparation">

<t>During AUTH48, the RPC will run the prep tool in canonical RFC preparation mode
and make the results available to the authors so they can see what the final
output might look like. When the document is done with AUTH48 review, the RPC
runs the prep tool in canonical RFC preparation mode one last time, locks down
the canonicalized XML, runs the formatters for the publication
formats, and publishes all of those. It is probably a good idea for the RPC to
keep a copy of the input XML file from the various steps of the RFC production
process.</t>

<t>This document assumes that the prep tool will be used in the following manner by the RFC Production Center;
they may use something different, or with different configuration.</t>

<t>Similarly to I-D’s, the prepped XML can be used later to re-render the output
formats, or to generate new formats.</t>

</section>
<section anchor="steps" title="What the v3 Prep Tool Does">

<t>The steps listed here are in order of processing. In all cases where the prep
tool would “add” an attribute or element, if that attribute or element already
exists, the prep tool will check that the attribute or element is correct. If
the value is incorrect, the prep tool will warn with the old and new values,
then replace the incorrect value with the new value.</t>

<t><list style="numbers">
  <t>Fully process any DTDs in the input document, then remove the DTD.
At a minimum, this entails processing the entityrefs and includes for external
files.</t>
  <t>Process all &lt;x:include&gt; elements. Note: &lt;x:include&gt;d XML may
include more &lt;x:include&gt;s (with relative URLs rooted at the xml:base). The
tool may be configurable with a limit on the depth of recursion.</t>
  <t>Run idnits. idnits will indicate if it encountered any errors, and will also provide
text with all of the warnings and errors in a human-readable form. The prep tool
displays all the warnings and errors, and stops if there was an error.</t>
  <t>Remove processing instructions.</t>
  <t>If in RFC production mode, remove comments.</t>
  <t>Add the “Status of this Memo” text with current values. However, if
different boilerplate text already exists in the input, produce a warning that
says that other tools, specifically the draft submission tool, will treat that
condition as an error. The application will use the “category”,
“submission”, and “consensus” attributes of the &lt;rfc&gt; element to determine
which <xref target="RFC5741"/> boilerplate to include, as described in Appendix A of
<xref target="I-D.hoffman-xml2rfc"/>.</t>
  <t>Add the “Copyright Notice” text. The application will use the
“ipr” and “submissionType” attributes of the &lt;rfc&gt; element and
the &lt;date&gt; element to determine which portions and which
version of the TLP to use, as described in A.1 of <xref target="I-D.hoffman-xml2rfc"/>.</t>
  <t>Fill in the “prepTime” attribute of &lt;rfc&gt; with the current datetime.</t>
  <t>Fill in the “mode” attribute of &lt;rfc&gt; with a string (to be determined later)
indicating the type of prepping that was done (RFC production or I-D mode).</t>
  <t>If in I-D mode, if there is a &lt;note&gt; element with a “removeInRFC”
attribute that has the value “true”, add a paragraph to the top of the &lt;note&gt; element that says
“This note is to be removed before publishing as an RFC.”, if such a
paragraph does not yet exist.</t>
  <t>If in I-D mode, fill in “expiresDate” attribute of &lt;rfc&gt; based on the
the &lt;date&gt; element of the document’s &lt;front&gt; element, if there is one.  Use the same expiry date (if needed) in the boilerplate.</t>
  <t>Fill in any default values for attributes on elements, except “keepWithNext”
and “keepWithPrevious” of &lt;t&gt;, and “toc” of &lt;section&gt;.</t>
  <t>For any &lt;reference&gt; element that does not already have a “target” attribute, fill that
attribute in if the element has one or more &lt;seriesinfo&gt; child element(s). The particular URLs
for RFCs and Internet-Drafts for this step will be specified later by the RFC Editor and
the IESG. These URLs might also be different from before and after the v3 format is adopted.</t>
  <t>For each &lt;reference&gt; or &lt;referencegroup&gt; that has an associated &lt;displayreference&gt;,
replace the value of the “anchor” attribute with the 
value of the “to” attribute of the associated &lt;displayreference&gt;.</t>
  <t>Add a “slugifiedName” attribute to each &lt;name&gt; element that does not
contain one; replace the attribute if it contains a value that begins with “n-“.</t>
  <t>Add “pn” attributes for all parts.  Parts are:
  <list style="symbols">
      <t>&lt;section&gt;: pn=’s-1.4.2’</t>
      <t>&lt;abstract&gt;: pn=’s-abstract’</t>
      <t>&lt;note&gt;: pn=’s-note-2’</t>
      <t>&lt;boilerplate&gt;: pn=’s-boilerplate’</t>
      <t>&lt;table&gt;: pn=’t-3’</t>
      <t>&lt;figure&gt;: pn=’f-4’</t>
      <t>&lt;artwork&gt;, &lt;aside&gt;, &lt;blockquote&gt;, &lt;dl&gt;, &lt;dt&gt;,
 &lt;li&gt;, &lt;ol&gt;, &lt;references&gt;, &lt;sourcecode&gt;, &lt;t&gt;,
 &lt;ul&gt;: pn=’p-[section]-[counter]’</t>
    </list></t>
  <t>Add a “start” attribute to every &lt;ol&gt; element containing a group that
does not already have a start.</t>
  <t>If the “sortRefs” attribute of the &lt;rfc&gt; element is true,
sort the &lt;reference&gt;s and &lt;referencegroup&gt;s lexically by the value of the “anchor” attribute,
as modified by the “to” attribute of any &lt;displayreference&gt; element.</t>
  <t>For each &lt;xref&gt; element referring to a &lt;reference&gt; or &lt;referencegroup&gt;
that has an associated &lt;displayreference&gt;, modify the “target” 
attribute of the &lt;xref&gt; to match the “to” attribute of the associated &lt;displayreference&gt;.</t>
  <t>For each &lt;xref&gt; element that has content, fill the “derivedContent” with the element
content, having first trimmed the whitespace from ends of content text.
Issue a warning if the “derivedContent” attribute already exists and has a different value than what
was being filled in.</t>
  <t>For each &lt;xref&gt; element that does not have content, fill the “derivedContent” based on the
“format” attribute.
  <list style="symbols">
      <t>For format=’counter’, the “derivedContent” is the section, figure, table, or ordered list number
 of the element with anchor equal to the xref target.</t>
      <t>For format=’default’ and the “target” attribute points to a &lt;reference&gt; or
 &lt;referencegroup&gt; element, the “derivedContent” is the value of the “target” attribute
 (or the “to” attribute of a &lt;displayreference&gt; element for the targeted &lt;reference&gt;).</t>
      <t>For format=’default’ and the “target” attribute points something else, the “derivedContent” is the
 title of the thing pointed to, such as “Section 2.3” or “Table 4”.</t>
      <t>For format=’title’, if the target is a &lt;reference&gt; element, the “derivedContent” attribute is
 the name of the reference, extracted from the &lt;title&gt; child of the &lt;front&gt; child of the
 reference.</t>
      <t>For format=’title’, if the target element has a &lt;name&gt; child element, the “derivedContent”
 attribute is the text content of that &lt;name&gt; element concatenated with the text content of
 each descendant node of &lt;name&gt; (that is, stripping out all of the XML markup, leaving only the
 text).</t>
      <t>For format=’title’, if the target element does not contain a &lt;name&gt; child element, the
 “derivedContent” attribute is value of the “target” attribute with no other adornment.
 Issue a warning if the “derivedContent” attribute already exists and has a different value than what
 was being filled in.</t>
    </list></t>
  <t>For each &lt;relref&gt; element referring to a &lt;reference&gt; or &lt;referencegroup&gt;
that has an associated &lt;displayreference&gt;, modify the “target” 
attribute of the &lt;relref&gt; to match the “to” attribute of the associated &lt;displayreference&gt;.</t>
  <t>For each &lt;relref&gt; element, fill in the “derivedLink” attribute.</t>
  <t>For each &lt;relref&gt; element that does not have content, fill the”derivedRemoteContent”
based on the content of the target reference.
  <list style="symbols">
      <t>If the target reference is a RFC or Internet-Draft in the v3 format, find the anchor given in the
 “relative” attribute or derived from the “section” attribute, and use the identifier of that element
 (such as “Section 2.3” or “Table 4”) for the “derivedRemoteContent”.</t>
      <t>If the target reference is not a RFC or Internet-Draft in the v3 format, use the value of the
 “relative” or “section” attribute for the “derivedRemoteContent”.</t>
      <t>Issue a warning if the “derivedRemoteContent” attribute already exists and has a different value
 than what was being filled in.</t>
    </list></t>
  <t>For each &lt;relref&gt; element that has content, fill the “derivedRemoteContent” with the
element content, having first trimmed the whitespace from ends of content text.
Issue a warning if the “derivedRemoteContent” attribute already exists and has a different value
than what was being filled in.</t>
  <t>Remove every &lt;displayreference&gt; element.</t>
  <t>If an &lt;artwork&gt; element has a “src” attribute with no scheme is
specified, treat the scheme as “file:” in a path relative to the file being
processed.  This will likely be one of the most common authoring approaches.</t>
  <t>If an &lt;artwork&gt; element has a “src” attribute with a “file:” scheme,
and if processing the URL would cause the processor to retrieve a file that is
not in the same directory, or a subdirectory, as the file being processed, give
an error.  This rule attempts to prevent &lt;artwork
src=’file:///etc/passwd’&gt; and similar security issues.</t>
  <t>If an &lt;artwork&gt; element has type=’svg’ and there is a “src” attribute,
the data needs to be moved into the content of the &lt;artwork&gt; element.
  <list style="symbols">
      <t>If the “src” URI scheme is “data:”, fill the content of the &lt;artwork&gt;
 element with that data and remove the “src” attribute.</t>
      <t>If the “src” URI scheme is “file:”, “http:”, or “https:”, fill the content
 of the &lt;artwork&gt; element with the resolved XML from the URI in the
 “src” attribute. Add an “originalSrc” attribute with the value of the URI and
 remove the “src” attribute.</t>
    </list></t>
  <t>If an &lt;artwork&gt; element has type=’binary-art’, the data needs to be in
a “src” attribute with a URI scheme of “data:”.
If the “src” URI scheme is “file:”, “http:”, or “https:”, resolve the URL.
Replace the “src” attribute with a “data:” URI,
add an “originalSrc” attribute with the value of the URI, and remove the “src”
attribute.  For the “http:” and “https:” URI schemes,
the mediatype of the “data:” URI will be the Content-Type of the HTTP response.
For the “file:” URI scheme,
the mediatype of the “data:” URI needs to be guessed with heuristics
(this is possibly a bad idea).
Note: since this feature can’t be used for RFCs at the moment, this entire
feature might be de-prioritized.</t>
  <t>If an &lt;artwork&gt; element does not have type=’svg’ or type=’binary-art’
and there is a “src” attribute, the data needs to be moved into the content of
the &lt;artwork&gt; element. Note that this step assumes that all of the
preferred types other than “binary-art” are text.
  <list style="symbols">
      <t>If the “src” URI scheme is “data:”, fill the content of the &lt;artwork&gt;
 element with the correctly-escaped form of that data and remove the “src”
 attribute.</t>
      <t>If the “src” URI scheme is “file:”, “http:”, or “https:”, fill the content
 of the &lt;artwork&gt; element with the correctly-escaped form of the
 resolved text from the URI in the “src” attribute. Add an “originalSrc”
 attribute with the value of the URI and remove the “src” attribute.</t>
    </list></t>
  <t>If a &lt;sourcecode&gt; element has a “src” attribute with no scheme is
specified, treat the scheme as “file:” in a path relative to the file being
processed.</t>
  <t>If a &lt;sourcecode&gt; element has a “src” attribute with a “file:” scheme,
and if processing the URL would cause the processor to retrieve a file that is
not in the same directory, or a subdirectory, as the file being processed, give
an error.  This rule attempts to prevent &lt;sourcecode
src=’file:///etc/passwd’&gt; and similar security issues.</t>
  <t>If a &lt;sourcecode&gt; element has a “src” attribute,
the data needs to be moved into the content of the &lt;sourcecode&gt; element.
  <list style="symbols">
      <t>If the “src” URI scheme is “data:”, fill the content of the
 &lt;sourcecode&gt; element with the appropriately-escaped data and remove
 the “src” attribute.</t>
      <t>If the “src” URI scheme is “file:”, “http:”, or “https:”, fill the content
 of the &lt;sourcecode&gt; element with the appropriately-escaped resolved
 text from the URI in the “src” attribute. Add an “originalSrc” attribute with
 the value of the URI and remove the “src” attribute.</t>
    </list></t>
  <t>Determine all the characters used in the document, and fill in “scripts”
attribute for &lt;rfc&gt;.</t>
  <t>Ensure that the output has the “version” attribute of &lt;rfc&gt;, and that
it is set to “3”.</t>
  <t>If in RFC production mode, remove all &lt;link&gt; elements whose “rel” attribute
has the value “alternate”.</t>
  <t>If in RFC production mode, check if there is a &lt;link&gt; element with
an ISSN for the RFC series; if not, add one.</t>
  <t>If in RFC production mode, check if there is a &lt;link&gt; element with
a DOI for this RFC; if not, add one.</t>
  <t>If in RFC production mode, check if there is a &lt;link&gt; element with
the file name of the Internet-Draft that became this RFC; if not, add one.</t>
  <t>If in RFC production mode, remove all “xml:base” or “originalSrc” attributes from
all elements.</t>
  <t>Pretty-format the XML output.  (Note: tools like <eref target="https://github.com/hildjj/dentin">https://github.com/hildjj/dentin</eref> do an adequate job.)</t>
  <t>If in RFC production mode, ensure that the result is in full compliance to v3
schema, without any deprecated elements or attributes, and give an error if any
issues are found.</t>
</list></t>

</section>
<section anchor="additional-uses-for-the-prep-tool" title="Additional Uses for the Prep Tool">

<t>There will be a need for Internet-Draft authors who include files from their
local disk (such as for &lt;artwork src=”mydrawing.svg”/&gt;) to have the
contents of those files inlined to their drafts before submitting them to the
Internet-Draft processor. (There is a possibility that the Internet-Draft
processor will allow XML files and accompanying files to be submitted at the
same time, but this seems troublesome from a security, portability, and
complexity standpoint.) For these users, having a local copy of the prep tool
that has an option to just inline all local files would be terribly useful. That
option would be a proper subset of the steps given in <xref target="steps"/>.</t>

<t>A feature that might be useful in a local prep tool would be the inverse of the
“just inline” option would be “extract all”. This would allow a user who has a
v3 RFC or Internet-Draft to dump all of the &lt;artwork&gt; and
&lt;sourcecode&gt; elements into local files instead of having to find each one
in the XML. This option might even do as much validation as possible on the
extracted &lt;sourcecode&gt; elements.  This feature might also remove some of
the features added by the prep tool (such as part numbers and slugifiedName’s
starting with “n-“) in order to make the resulting file easier to edit.</t>

</section>
<section anchor="ianacons" title="IANA Considerations">

<t>None.</t>

</section>
<section anchor="securitycons" title="Security Considerations">

<t>None.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Many people contributed valuable ideas to this document. Special thanks go to
Robert Sparks for his in-depth review and contributions early in the
development of this document.</t>

</section>


  </middle>

  <back>


    <references title='Informative References'>





<reference  anchor='RFC5741' target='http://www.rfc-editor.org/info/rfc5741'>
<front>
<title>RFC Streams, Headers, and Boilerplates</title>
<author initials='L.' surname='Daigle' fullname='L. Daigle' role='editor'><organization /></author>
<author initials='O.' surname='Kolkman' fullname='O. Kolkman' role='editor'><organization /></author>
<author><organization>IAB</organization></author>
<date year='2009' month='December' />
<abstract><t>RFC documents contain a number of fixed elements such as the title page header, standard boilerplates, and copyright/IPR statements. This document describes them and introduces some updates to reflect current usage and requirements of RFC publication.  In particular, this updated structure is intended to communicate clearly the source of RFC creation and review.  This document is not an Internet Standards  Track specification; it is published for informational purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='5741'/>
<seriesInfo name='DOI' value='10.17487/RFC5741'/>
</reference>



<reference  anchor='RFC6949' target='http://www.rfc-editor.org/info/rfc6949'>
<front>
<title>RFC Series Format Requirements and Future Development</title>
<author initials='H.' surname='Flanagan' fullname='H. Flanagan'><organization /></author>
<author initials='N.' surname='Brownlee' fullname='N. Brownlee'><organization /></author>
<date year='2013' month='May' />
<abstract><t>This document describes the current requirements and requests for enhancements for the format of the canonical version of RFCs.  Terms are defined to help clarify exactly which stages of document production are under discussion for format changes.  The requirements described in this document will determine what changes will be made to RFC format.  This document updates RFC 2223.</t></abstract>
</front>
<seriesInfo name='RFC' value='6949'/>
<seriesInfo name='DOI' value='10.17487/RFC6949'/>
</reference>



<reference anchor='I-D.hoffman-xml2rfc'>
<front>
<title>The 'XML2RFC' version 3 Vocabulary</title>

<author initials='P' surname='Hoffman' fullname='Paul Hoffman'>
    <organization />
</author>

<date month='September' day='4' year='2015' />

<abstract><t>This document defines the "XML2RFC" version 3 vocabulary; an XML- based language used for writing RFCs and Internet-Drafts.  It is heavily derived from the version 2 vocabulary that is also under discussion.  This document obsoletes the v2 grammar described in RFC 2629 and its expected followup, draft-iab-xml2rfc.  Editorial Note (To be removed by RFC Editor)  Discussion of this draft takes place on the rfc-interest mailing list (rfc-interest@rfc-editor.org), which has its home page at &lt;https://www.rfc-editor.org/mailman/listinfo/rfc-interest>.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-hoffman-xml2rfc-23' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-hoffman-xml2rfc-23.txt' />
</reference>




    </references>



  </back>
</rfc>

